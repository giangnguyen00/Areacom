"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils","ngMap"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("calendars"),ApplicationConfiguration.registerModule("contracts"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("customers"),ApplicationConfiguration.registerModule("maps"),ApplicationConfiguration.registerModule("users"),angular.module("calendars").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCalendars",{url:"/calendars",templateUrl:"modules/calendars/views/list-calendars.client.view.html"}).state("createCalendar",{url:"/calendars/create",templateUrl:"modules/calendars/views/create-calendar.client.view.html"}).state("viewCalendar",{url:"/calendars/:calendarId",templateUrl:"modules/calendars/views/view-calendar.client.view.html"}).state("editCalendar",{url:"/calendars/:calendarId/edit",templateUrl:"modules/calendars/views/edit-calendar.client.view.html"})}]),angular.module("calendars").controller("CalendarsController",["$scope","Contracts","$modal","$log","$rootScope",function($scope,Contracts,$modal,$log,$rootScope){$scope.day=moment(),$scope.find=function(){$scope.contracts=Contracts.query()},$scope.dateMatch=function(day,contract){return moment(day).format("MM/DD/YYYY")==moment(contract.StartDate).format("MM/DD/YYYY")},$scope.compareDate=function(day){var result=!1,date1=moment(day).format("MM/DD/YYYY");return alert(date1),angular.forEach(scope.contracts,function(value){var date2=moment(value.StartDate).format("MM/DD/YYYY");date1==date2&&(result=!0)}),result},this.openModal=function(size,selectedContract){var modalInstance=$modal.open({templateUrl:"/modules/contracts/views/contract-from-calendar.client.view.html",controller:["$scope","$modalInstance","$stateParams","contract",function($scope,$modalInstance,$stateParams,contract){$scope.contract=contract,$scope.ok=function(){$modalInstance.close()},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{contract:function(){return selectedContract}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})}}]),angular.module("calendars").directive("calendars",[function(){function _removeTime(date){return date.day(0).hour(0).minute(0).second(0).millisecond(0)}function _buildMonth(scope,start,month){scope.weeks=[];for(var done=!1,date=start.clone(),monthIndex=date.month(),count=0;!done;)scope.weeks.push({days:_buildWeek(date.clone(),month)}),date.add(1,"w"),done=count++>2&&monthIndex!==date.month(),monthIndex=date.month()}function _buildWeek(date,month){for(var days=[],i=0;7>i;i++)days.push({name:date.format("dd").substring(0,1),number:date.date(),isCurrentMonth:date.month()===month.month(),isToday:date.isSame(new Date,"day"),date:date}),date=date.clone(),date.add(1,"d");return days}return{restrict:"E",templateUrl:"modules/calendars/views/calendars.template.client.view.html",scope:{selected:"=",contracts:"="},link:function(scope){scope.selected=_removeTime(scope.selected||moment()),scope.month=scope.selected.clone(),scope.selected=moment();var start=scope.selected.clone();start.date(1),_removeTime(start.day(0)),_buildMonth(scope,start,scope.month),scope.select=function(day){scope.selected=day.date},scope.next=function(){var next=scope.month.clone();_removeTime(next.month(next.month()+1).date(1)),scope.month.month(scope.month.month()+1),_buildMonth(scope,next,scope.month)},scope.previous=function(){var previous=scope.month.clone();_removeTime(previous.month(previous.month()-1).date(1)),scope.month.month(scope.month.month()-1),_buildMonth(scope,previous,scope.month)},scope.hasContract=function(day){var date1=moment(day.date).format("MM/DD/YYYY"),result=!1;return angular.forEach(scope.contracts,function(value,index){var date2=moment(value.StartDate).format("MM/DD/YYYY");date1==date2&&(result=!0)}),result},scope.goToday=function(){var result=!1;console.log(1),scope.month=scope.selected.clone(),scope.selected=moment();var start=scope.selected.clone();return start.date(1),_removeTime(start.day(0)),_buildMonth(scope,start,scope.month),result=!0,console.log(0),result}}}}]),angular.module("calendars").factory("Calendars",["$resource",function($resource){return $resource("calendars/:calendarId",{calendarId:"@_id"},{update:{method:"PUT"}})}]),angular.module("contracts").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Contracts","contracts","/contracts(/create)?")}]),angular.module("contracts").config(["$stateProvider",function($stateProvider){$stateProvider.state("listContracts",{url:"/contracts",templateUrl:"modules/contracts/views/list-contracts.client.view.html"}).state("createContract",{url:"/contracts/create",templateUrl:"modules/contracts/views/create-contract.client.view.html"}).state("viewContract",{url:"/contracts/:contractId",templateUrl:"modules/contracts/views/view-contract.client.view.html"}).state("editContract",{url:"/contracts/:contractId/edit",templateUrl:"modules/contracts/views/edit-contract.client.view.html"})}]),angular.module("contracts").controller("ContractsController",["$scope","$stateParams","$location","Authentication","Contracts",function($scope,$stateParams,$location,Authentication,Contracts){$scope.authentication=Authentication,this.contracts=Contracts.query(),$scope.create=function(){var contract=new Contracts({name:this.name,tcsiteID:this.tcsiteID,tositeID:this.tositeID,towner:this.towner,pobox:this.pobox,numdish:this.numdish,StartDate:this.StartDate,EndDate:this.EndDate,address:this.address,city:this.city,state:this.state,zip:this.zip,lat:this.lat,longit:this.longit,ntp:this.ntp,towerbool:this.towerbool,notes:this.notes});contract.$save(function(response){$location.path("contracts/"+response._id),$scope.name="",$scope.StartDate="",$scope.tcsiteID="",$scope.tositeID="",$scope.towner="",$scope.pobox="",$scope.numdish="",$scope.address="",$scope.city="",$scope.state="",$scope.zip="",$scope.EndDate="",$scope.longit="",$scope.lat="",$scope.ntp="",$scope.towerbool=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(contract){if(contract){contract.$remove();for(var i in $scope.contracts)$scope.contracts[i]===contract&&$scope.contracts.splice(i,1)}else $scope.contract.$remove(function(){$location.path("contracts")})},$scope.update=function(){var contract=$scope.contract;contract.$update(function(){$location.path("contracts/"+contract._id)},function(errorResponse){$scope.error=errorResponse.data.message})},this.removeContractFromModal=function(removedContract){var contract=removedContract;if(contract){contract.$remove();for(var i in this.contracts)this.contracts[i]===contract&&this.contracts.splice(i,1)}else this.contract.$remove(function(){})},this.updateContractFromModal=function(updatedContract){var contract=updatedContract;contract.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.contracts=Contracts.query()},$scope.findOne=function(){$scope.contract=Contracts.get({contractId:$stateParams.contractId})}}]),angular.module("contracts").factory("Contracts",["$resource",function($resource){return $resource("contracts/:contractId",{contractId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("main",{url:"/main",templateUrl:"modules/core/views/home.client.view.html"}).state("main.calendars",{views:{url:"/test",name:{templateUrl:"modules/calendars/views/calendars.client.view.html"}}}).state("main.list",{views:{url:"/test",name:{templateUrl:"modules/contracts/views/list-contracts.client.view.html"}}})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","$state",function($scope,Authentication,$state){$scope.authentication=Authentication,$scope.changeState=function(){$state.go("main.calendars")}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("customers").run(["Menus",function(Menus){}]),angular.module("customers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCustomers",{url:"/customers",templateUrl:"modules/customers/views/list-customers.client.view.html"})}]);var customersApp=angular.module("customers");customersApp.controller("CustomersController",["$scope","$stateParams","Authentication","Customers","$modal","$log","$http",function($scope,$stateParams,Authentication,Customers,$modal,$log,$http){this.authentication=Authentication,this.customers=Customers.query(),$scope.userList={},$scope.getUsers=function(){$http.get("/users/list").success(function(response){$scope.userList=response,console.log(response)}).error(function(response){$scope.error=response.message})},this.modalCreate=function(size){var modalInstance=$modal.open({templateUrl:"modules/customers/views/create-customer.client.view.html",controller:["$scope","$modalInstance",function($scope,$modalInstance){$scope.ok=function(){createCustomerForm.$invalid||$modalInstance.close()},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size});modalInstance.result.then(function(selectedItem){},function(){$log.info("Modal dismissed at: "+new Date)})},$scope.modalUpdate=function(size,selectedCustomer){console.log("open");var modalInstance=$modal.open({templateUrl:"modules/customers/views/edit-customer.client.view.html",controller:["$scope","$modalInstance","customer",function($scope,$modalInstance,customer){$scope.customer=customer,$scope.ok=function(){updateCustomerForm.$invalid||$modalInstance.close($scope.customer)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{customer:function(){return selectedCustomer}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})},this.update=function(updatedCustomer){console.log("Now calling the Update Method");var customer=updatedCustomer;$http.post("/users/update",customer).success(function(response){}).error(function(response){$scope.error=response.message})},$scope.remove=function(customer){console.log("Now calling the remove Method");var cust=customer;"user"==cust.roles&&console.log("user"),$http.post("/users/delete",cust).success(function(response){console.log("called post")}).error(function(response){console.log("error"),$scope.error=response.message}),console.log("end post")}}]),customersApp.controller("CustomersCreateController",["$scope","Customers","Notify",function($scope,Customers,Notify){this.create=function(){var customer=new Customers({firstName:this.firstName,lastName:this.lastName,userName:this.userName,password:this.password,email:this.email,phone:this.phone});customer.$save(function(response){Notify.sendMsg("NewCustomer",{id:response._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),customersApp.controller("CustomersUpdateController",["$scope","Customers",function($scope,Customers){}]),customersApp.directive("customerList",["Customers","Notify",function(Customers,Notify){return{restrict:"E",transclude:!0,templateUrl:"modules/customers/views/customer-list-template.html",link:function($scope,element,attrs){Notify.getMsg("NewCustomer",function(event,data){$scope.CustomerCtrl.customers=Customers.query()})}}}]),angular.module("customers").factory("Customers",["$resource",function($resource){return $resource("customers/:customerId",{customerId:"@_id"},{update:{method:"PUT"}})}]).factory("Notify",["$rootScope",function($rootScope){var notify={};return notify.sendMsg=function(msg,data){data=data||{},$rootScope.$emit(msg,data),console.log("message sent!")},notify.getMsg=function(msg,func,scope){var unbind=$rootScope.$on(msg,func);scope&&scope.$on("destroy",unbind)},notify}]),angular.module("maps").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Maps","maps","/maps(/create)?")}]),angular.module("maps").config(["$stateProvider",function($stateProvider){$stateProvider.state("listMaps",{url:"/maps",templateUrl:"modules/maps/views/list-maps.client.view.html"}).state("createMap",{url:"/maps/create",templateUrl:"modules/maps/views/create-map.client.view.html"}).state("viewMap",{url:"/maps/:mapId",templateUrl:"modules/maps/views/view-map.client.view.html"}).state("editMap",{url:"/maps/:mapId/edit",templateUrl:"modules/maps/views/edit-map.client.view.html"})}]),angular.module("maps").controller("MapsController",["$scope","Contracts","$stateParams","$location","Authentication","Maps",function($scope,$stateParams,$location,Authentication,Maps){$scope.authentication=Authentication,$scope.create=function(){var map=new Maps({name:this.name});map.$save(function(response){$location.path("maps/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(map){if(map){map.$remove();for(var i in $scope.maps)$scope.maps[i]===map&&$scope.maps.splice(i,1)}else $scope.map.$remove(function(){$location.path("maps")})},$scope.update=function(){var map=$scope.map;map.$update(function(){$location.path("maps/"+map._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.maps=Maps.query()},$scope.findOne=function(){$scope.map=Maps.get({mapId:$stateParams.mapId})}}]),angular.module("maps").factory("Maps",["$resource",function($resource){return $resource("maps/:mapId",{mapId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,console.log(response)}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/main")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$location.path("/main"),$scope.passwordDetails=null,Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response,$location.path("/main")},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);